{"version":3,"sources":["Components/Encode.js","Components/Decode.js","App.js","serviceWorker.js","index.js"],"names":["Encode","props","handleChange","event","setState","input","target","value","output","encodeText","text","replace","split","map","letter","charCode","charCodeAt","String","fromCharCode","state","caesarShiftNumber","className","id","onChange","this","rows","cols","React","Component","Decode","decodeText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MA+CeA,G,uDA3CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,aAAe,SAACC,GAEZ,EAAKC,SAAS,CACVC,MAAOF,EAAMG,OAAOC,MACpBC,OAAQ,EAAKC,WAAWN,EAAMG,OAAOC,UAb1B,EAiBnBE,WAAa,SAACC,GAEV,OAAOA,EAAKC,QADU,eACa,IAC9BC,MAAM,IACNC,KAAI,SAAAC,GACD,IAAMC,EAAWD,EAAOE,WAAW,GACnC,OAAiB,KAAbD,EAAwBD,EACrBC,GAAY,IAAMA,GAAY,GAC/BE,OAAOC,cAAeH,EAAW,GAAK,EAAKI,MAAMC,mBAAqB,GAAM,IAC5EH,OAAOC,cAAeH,EAAW,GAAK,EAAKI,MAAMC,mBAAqB,GAAM,QAxB1F,EAAKD,MAAQ,CACTd,MAAO,GACPG,OAAQ,GACRY,kBAAmB,GALR,E,qDA8Bf,OACI,yBAAKC,UAAU,OACX,sCACA,sCACA,8BAAUC,GAAG,QAAQC,SAAUC,KAAKtB,aAAcuB,KAAK,IAAIC,KAAK,KAAKnB,MAAOiB,KAAKL,MAAMd,QAAS,6BAChG,gDACA,0BAAMgB,UAAU,UAAUG,KAAKL,MAAMX,a,GArChCmB,IAAMC,YC2CZC,E,kDA1CX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAQVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,MAAOF,EAAMG,OAAOC,MACpBC,OAAQ,EAAKsB,WAAW3B,EAAMG,OAAOC,UAZ1B,EAgBnBuB,WAAa,SAACpB,GAEV,OAAOA,EAAKC,QADU,eACa,IAC9BC,MAAM,IACNC,KAAI,SAAAC,GACD,IAAMC,EAAWD,EAAOE,WAAW,GACnC,OAAiB,KAAbD,EAAwBD,EACrBC,GAAY,IAAMA,GAAY,GAC/BE,OAAOC,aAAa,IAAM,GAAKH,EAAW,EAAKI,MAAMC,mBAAqB,IAC1EH,OAAOC,aAAa,KAAO,IAAMH,EAAW,EAAKI,MAAMC,mBAAqB,QAvB1F,EAAKD,MAAQ,CACTd,MAAO,GACPG,OAAQ,GACRY,kBAAmB,GALR,E,qDA6Bf,OACI,yBAAKC,UAAU,OACX,sCACA,sCACA,8BAAUC,GAAG,QAAQC,SAAUC,KAAKtB,aAAcuB,KAAK,IAAIC,KAAK,KAAKnB,MAAOiB,KAAKL,MAAMd,QAAS,6BAChG,gDACA,0BAAMgB,UAAU,UAAUG,KAAKL,MAAMX,a,GApChCmB,IAAMC,WCiBZG,MAff,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UCAUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cf955307.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass Encode extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: \"\",\n            output: \"\",\n            caesarShiftNumber: 7\n        }\n    }\n\n    handleChange = (event) => {\n\n        this.setState({\n            input: event.target.value,\n            output: this.encodeText(event.target.value)\n        })\n    }\n\n    encodeText = (text) => {\n        const LETTER_REGEXP = /[^a-zA-Z ]/gm;\n        return text.replace(LETTER_REGEXP, \"\")\n            .split(\"\")\n            .map(letter => {\n                const charCode = letter.charCodeAt(0);\n                if (charCode === 32) return letter;\n                return charCode >= 65 && charCode <= 90\n                    ? String.fromCharCode(((charCode - 65 + this.state.caesarShiftNumber) % 26) + 65)\n                    : String.fromCharCode(((charCode - 97 + this.state.caesarShiftNumber) % 26) + 97)\n            })\n    }\n    render() {\n        return (\n            <div className=\"col\">\n                <h2>ENCODE</h2>\n                <p>Message</p>\n                <textarea id=\"input\" onChange={this.handleChange} rows=\"2\" cols=\"50\" value={this.state.input} /><br/>\n                <p>Encrypted Message</p>\n                <span className=\"result\">{this.state.output}</span>\n            </div>\n        );\n    }\n\n}\n\nexport default Encode;\n","import React from 'react';\nimport '../App.css';\n\nclass Decode extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: \"\",\n            output: \"\",\n            caesarShiftNumber: 7\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            input: event.target.value,\n            output: this.decodeText(event.target.value)\n        })\n    }\n\n    decodeText = (text) => {\n        const LETTER_REGEXP = /[^a-zA-Z ]/gm;\n        return text.replace(LETTER_REGEXP, \"\")\n            .split(\"\")\n            .map(letter => {\n                const charCode = letter.charCodeAt(0);\n                if (charCode === 32) return letter;\n                return charCode >= 65 && charCode <= 90\n                    ? String.fromCharCode(90 - (90 - charCode + this.state.caesarShiftNumber) % 26 )\n                    : String.fromCharCode(122 - (122 - charCode + this.state.caesarShiftNumber) % 26 )\n            })\n    }\n    render() {\n        return (\n            <div className=\"col\">\n                <h2>DECODE</h2>\n                <p>Message</p>\n                <textarea id=\"input\" onChange={this.handleChange} rows=\"2\" cols=\"50\" value={this.state.input} /><br/>\n                <p>Decrypted Message</p>\n                <span className=\"result\">{this.state.output}</span>\n            </div>\n        );\n    }\n\n}\n\nexport default Decode;\n","import React from 'react';\nimport Encode from './Components/Encode';\nimport Decode from './Components/Decode';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CAESAR CIPHER</h1>\n        <div className=\"row\">\n          <Encode />\n          <Decode />\n        </div>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}